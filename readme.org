#+title: Aseprite Scripting Examples

Some approaches to automating [[https://www.aseprite.org/][Aseprite]] workflows, featuring lua and some
[[https://github.com/babashka/babashka][babashka]] usage.

* Examples
These examples:

- are things I implemented when working on my own games
- have been ripped out and simplified
- are not intended to be consumable/reusable

My goal is to share approaches to scripting Aseprite things.

I hope these make it easier for you to create your own scripts and tools!

** Generating Box Art
The [[file:scripts/resize_canvas.lua][resize_canvas.lua]] script can be passed to aseprite like:

#+begin_src sh
aseprite -b \
    assets/boxart/base_logo.aseprite \
    --script-param filename=assets/boxart/header_capsule.aseprite \
    --script-param width=460 \
    --script-param height=215 \
    --script scripts/resize_canvas.lua
#+end_src

> GOTCHA: be sure to pass ~--script-param~ ahead of ~--script~!

That might be all you want, but if you're interested in running a number of
these, [[file:bb/tasks.clj][bb/tasks.clj]] contains a spec for all the Steam 'Coming Soon' page
required images, which looks something like:

#+begin_src clojure
{:header-capsule   {:width 460 :height 215}
 :small-capsule    {:width 231 :height 87}
 :main-capsule     {:width 616 :height 353}
 :vertical-capsule {:width 374 :height 448}
 :page-background  {:width 1438 :height 810}
 :library-capsule  {:width 600 :height 900}
 :library-header   {:width 460 :height 215}
 :library-hero     {:width 3840 :height 1240}
 :library-logo     {:width 1280 :height 720}
 :client-icon      {:width 16 :height 16 :skip-generate true :export-ext ".jpg"}
 :community-icon   {:width 184 :height 184}}
#+end_src

And they can all be generated and exported like:

#+begin_src sh
bb regenerate-boxart
#+end_src

This depends on a few 'base' aseprite files existing:

- ~assets/boxart/base_logo.aseprite~
- ~assets/boxart/base_logo_wide.aseprite~
- ~assets/boxart/base_logo_no_bg.aseprite~
- ~assets/boxart/base_bg_no_logo.aseprite~

The script could get smarter, and toggle the logo or background at generate time
via another passed option - but this was where I landed when shipping Dot Hop's
coming soon images.

** Creating tags from a list
The [[file:scripts/add_some_tags.lua][add_some_tags.lua]] script is intended to be invoked from within Aseprite
itself - see below for help Aseprite find your scripts.

The use-case for this script was a need to create a large number of animations
in several sprites. I got tired of creating tags by hand, when I already had a
list of them in text format.

This script lets you define a big list of tags:

#+begin_src lua
local tags = {
  -- Shared tags
  "idle", "_jump", "_dead", "run", "air", "_knocked_back", "_dying",
  "_landed", "walk", "_jump", "_jump_kick",
  "_punch", "_punch_2", "_kick", "_punched", "_kicked",
  "_grab", "_grabbed", "_throw", "thrown", "_hit_ground", "_get_up",
}
#+end_src

It runs through each tag, and any tag that doesn't already exist on the sprite
is created.

Beware that there are some gotchas - if anything crazy happens, you can 'undo'
the command (this is the benefit for running the code within
~app.transaction()~).

There is the beginning of a color wheel idea to help distinguish all the new
tags from each other. Perhaps this will be extended to support some more useful
per-tag colors at some point.

* Invoking a script from aseprite
Aseprite looks for script files in ~~/.config/aseprite/scripts/*~. (You can open
this dir via: ~File > Scripts > Open Scripts Folder~)

You could add a script there manually, but I like to symlink a per-project
~scripts~ directory in there:

#+begin_src sh
ln -s ~/russmatney/<project-name>/scripts ~/.config/aseprite/scripts/<project-name>
#+end_src

You'll likely need to ~File > Scripts > Rescan Scripts Folder~ at least once,
but you shouldn't need to do that in-between scripts.

Then you can start writing a script in your project, and invoke it from Aseprite
via ~File > Scripts > <project-name> > <script-name>~.
* Aseprite Resources
- API docs: https://www.aseprite.org/api/app#app
- CLI docs: https://aseprite.org/docs/cli/
- Bonus: Aseprite Extensions by Kacper Wozniak: https://thkaspar.itch.io/
  worth the extensions and reading the code!
